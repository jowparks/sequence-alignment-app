/* tslint:disable */
/* eslint-disable */
/**
 * Alignment API
 * Django alignment PAI
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Genome } from './Genome';
import {
    GenomeFromJSON,
    GenomeFromJSONTyped,
    GenomeToJSON,
} from './Genome';

/**
 * 
 * @export
 * @interface Gene
 */
export interface Gene {
    /**
     * 
     * @type {number}
     * @memberof Gene
     */
    readonly id: number;
    /**
     * 
     * @type {Genome}
     * @memberof Gene
     */
    readonly genome: Genome;
    /**
     * e.g. AACGGAATACCAGAGAG
     * @type {string}
     * @memberof Gene
     */
    sequence: string;
    /**
     * e.g. a001L
     * @type {string}
     * @memberof Gene
     */
    name: string;
    /**
     * e.g. hypothetical protein
     * @type {string}
     * @memberof Gene
     */
    protein: string;
    /**
     * e.g. GeneID:918202
     * @type {string}
     * @memberof Gene
     */
    dbXref: string;
    /**
     * NP_048349.1'
     * @type {string}
     * @memberof Gene
     */
    proteinId: string;
}

/**
 * Check if a given object implements the Gene interface.
 */
export function instanceOfGene(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "genome" in value;
    isInstance = isInstance && "sequence" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "protein" in value;
    isInstance = isInstance && "dbXref" in value;
    isInstance = isInstance && "proteinId" in value;

    return isInstance;
}

export function GeneFromJSON(json: any): Gene {
    return GeneFromJSONTyped(json, false);
}

export function GeneFromJSONTyped(json: any, ignoreDiscriminator: boolean): Gene {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'genome': GenomeFromJSON(json['genome']),
        'sequence': json['sequence'],
        'name': json['name'],
        'protein': json['protein'],
        'dbXref': json['db_xref'],
        'proteinId': json['protein_id'],
    };
}

export function GeneToJSON(value?: Gene | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sequence': value.sequence,
        'name': value.name,
        'protein': value.protein,
        'db_xref': value.dbXref,
        'protein_id': value.proteinId,
    };
}

