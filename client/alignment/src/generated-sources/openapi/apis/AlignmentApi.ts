/* tslint:disable */
/* eslint-disable */
/**
 * Alignment API
 * Django alignment PAI
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Alignment,
  PatchedAlignment,
} from '../models';
import {
    AlignmentFromJSON,
    AlignmentToJSON,
    PatchedAlignmentFromJSON,
    PatchedAlignmentToJSON,
} from '../models';

export interface AlignmentCreateRequest {
    alignment: Alignment;
}

export interface AlignmentDestroyRequest {
    id: string;
}

export interface AlignmentPartialUpdateRequest {
    id: string;
    patchedAlignment?: PatchedAlignment;
}

export interface AlignmentRetrieveRequest {
    id: string;
}

export interface AlignmentSearchRetrieveRequest {
    sequence: string;
    genomes?: Array<string>;
}

export interface AlignmentUpdateRequest {
    id: string;
    alignment: Alignment;
}

/**
 * 
 */
export class AlignmentApi extends runtime.BaseAPI {

    /**
     */
    async alignmentCreateRaw(requestParameters: AlignmentCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alignment>> {
        if (requestParameters.alignment === null || requestParameters.alignment === undefined) {
            throw new runtime.RequiredError('alignment','Required parameter requestParameters.alignment was null or undefined when calling alignmentCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/alignment/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlignmentToJSON(requestParameters.alignment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlignmentFromJSON(jsonValue));
    }

    /**
     */
    async alignmentCreate(requestParameters: AlignmentCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alignment> {
        const response = await this.alignmentCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async alignmentDestroyRaw(requestParameters: AlignmentDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling alignmentDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/alignment/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async alignmentDestroy(requestParameters: AlignmentDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.alignmentDestroyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async alignmentListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Alignment>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/alignment/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlignmentFromJSON));
    }

    /**
     */
    async alignmentList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Alignment>> {
        const response = await this.alignmentListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async alignmentPartialUpdateRaw(requestParameters: AlignmentPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alignment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling alignmentPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/alignment/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAlignmentToJSON(requestParameters.patchedAlignment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlignmentFromJSON(jsonValue));
    }

    /**
     */
    async alignmentPartialUpdate(requestParameters: AlignmentPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alignment> {
        const response = await this.alignmentPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async alignmentRetrieveRaw(requestParameters: AlignmentRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alignment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling alignmentRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/alignment/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlignmentFromJSON(jsonValue));
    }

    /**
     */
    async alignmentRetrieve(requestParameters: AlignmentRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alignment> {
        const response = await this.alignmentRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async alignmentSearchRetrieveRaw(requestParameters: AlignmentSearchRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alignment>> {
        if (requestParameters.sequence === null || requestParameters.sequence === undefined) {
            throw new runtime.RequiredError('sequence','Required parameter requestParameters.sequence was null or undefined when calling alignmentSearchRetrieve.');
        }

        const queryParameters: any = {};

        if (requestParameters.genomes) {
            queryParameters['genomes'] = requestParameters.genomes;
        }

        if (requestParameters.sequence !== undefined) {
            queryParameters['sequence'] = requestParameters.sequence;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/alignment/search/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlignmentFromJSON(jsonValue));
    }

    /**
     */
    async alignmentSearchRetrieve(requestParameters: AlignmentSearchRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alignment> {
        const response = await this.alignmentSearchRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async alignmentUpdateRaw(requestParameters: AlignmentUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alignment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling alignmentUpdate.');
        }

        if (requestParameters.alignment === null || requestParameters.alignment === undefined) {
            throw new runtime.RequiredError('alignment','Required parameter requestParameters.alignment was null or undefined when calling alignmentUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwtAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/alignment/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AlignmentToJSON(requestParameters.alignment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlignmentFromJSON(jsonValue));
    }

    /**
     */
    async alignmentUpdate(requestParameters: AlignmentUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alignment> {
        const response = await this.alignmentUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
